/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query getProductBySlugQuery($siteSlug: String!, $productSlug: String!) {\n    productBySlug(siteSlug: $siteSlug, productSlug: $productSlug) {\n       ...ProductFieldsFromProductSlug\n    }\n  }\n": types.GetProductBySlugQueryDocument,
    "\n  query getSiteBySlugForSitePageQuery($slug: String!) {\n    siteBySlug(slug: $slug) {\n      name\n      ...SiteDetails\n    }\n  }\n": types.GetSiteBySlugForSitePageQueryDocument,
    "\n  query getSiteDeliveryInfoQuery($siteId: ID!) {\n    siteById(id: $siteId) {\n      ...SiteDeliveryInfo\n    }\n  }\n": types.GetSiteDeliveryInfoQueryDocument,
    "\n  query getOrderByIdQuery($orderId: ID!) {\n    orderById(id: $orderId) {\n      order {\n        orderDateTime\n        ...OrderByIdDetails\n      }\n    }\n  }\n": types.GetOrderByIdQueryDocument,
    "\n  query getAllOrdersForMeQuery($first: Int, $last: Int, $after: String, $before: String){\n    ordersForMe(first: $first, last: $last, after: $after, before: $before, order: [{orderDateTime: DESC}]){\n      edges {\n        node{\n          id\n          ...OrderCardFields\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      totalCount\n    }\n  }\n": types.GetAllOrdersForMeQueryDocument,
    "\n  query getSiteBySlugQuery($slug: String!) {\n    siteBySlug(slug: $slug) {\n      ...SiteDetails\n    }\n  }\n": types.GetSiteBySlugQueryDocument,
    "\n  mutation CreatePaymentDataMutation($input: CreatePaymentDataInput!) {\n    createPaymentData(input: $input) {\n      pymentData {\n        data\n        key\n        cipher\n        iv\n        paymentUri\n      }\n      errors {\n        message\n        code\n      }\n    }\n  }\n": types.CreatePaymentDataMutationDocument,
    "\n  fragment ProductListItem on Product {\n    id\n    name\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    siteSummary {\n      name\n      slug\n    }\n    extraOptions {\n      category{\n        id\n        name\n      }\n      extraOptionCategoryId\n      price {\n        amount\n        currency\n      }\n      id\n      name\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n": types.ProductListItemFragmentDoc,
    "\n  fragment SiteDeliveryInfo on Site {\n    id\n    onlyPredeffinedDeliveryOptions\n    deliveryOptions {\n      country\n      region\n      city\n      line1\n      line2\n      displayName\n    }\n  }\n": types.SiteDeliveryInfoFragmentDoc,
    "\n  fragment ProductFieldsForOrder on Product {\n    id\n    name\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    siteSummary {\n      name\n      slug\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n": types.ProductFieldsForOrderFragmentDoc,
    "\n  fragment OrderCardFields on Order {\n    id\n    number\n    stateDescription {\n      orderState\n      stateChangeDescription\n    }\n    totalPrice {\n      amount\n      currency\n    }\n    orderDateTime\n    paymentState {\n      status\n      type\n    }\n    items {\n      nodes {\n        id\n        productId\n        productName\n        productPrice {\n          amount\n          currency\n        }\n        quantity\n        orderItemTotalPrice {\n          currency\n          amount\n        }\n        extraOptions {\n          extraOptionId\n          price {\n            amount\n            currency\n          }\n          name\n        }\n        product {\n          slug\n          siteSummary {\n            name\n            slug\n          }\n        }\n        productDescription\n        image {\n          url\n        }\n      }\n    }\n  }\n": types.OrderCardFieldsFragmentDoc,
    "\n  fragment OrderByIdDetails on Order {\n    id\n    number\n    totalPrice {\n      amount\n      currency\n    }\n    orderDateTime\n    stateDescription {\n      orderState\n      stateChangeDescription\n    }\n    items {\n      nodes {\n        id\n        image {\n          url\n        }\n        extraOptions {\n          extraOptionId\n          price {\n            amount\n            currency\n          }\n          name\n        }\n        orderItemTotalPrice {\n          currency\n          amount\n        }\n        product {\n          id\n          name\n          image {\n            url\n          }\n          price {\n            amount\n            currency\n          }\n          slug\n          description\n          siteId\n          siteSummary {\n            name\n            slug\n          }\n          extraOptions {\n            category{\n              id\n              name\n            }\n            extraOptionCategoryId\n            price {\n              amount\n              currency\n            }\n            id\n            name\n          }\n          categories {\n            name\n            slug\n          }\n        }\n        productDescription\n        productName\n        productPrice {\n          amount\n          currency\n        }\n        quantity\n        productId\n      }\n    }\n  }\n": types.OrderByIdDetailsFragmentDoc,
    "\n  fragment ProductFieldsFromProductSlug on Product {\n    name\n    id\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    extraOptions {\n      category{\n        id\n        name\n      }\n      extraOptionCategoryId\n      price {\n        amount\n        currency\n      }\n      id\n      name\n    }\n    siteSummary {\n      name\n      slug\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n": types.ProductFieldsFromProductSlugFragmentDoc,
    "\n  fragment SiteDetails on Site {\n    name\n    id\n    slug\n    categories(order: [{ displayNumber: ASC }]) {\n      nodes {\n        id\n        name\n        slug\n        products(order: [{ name: ASC }]) {\n          nodes {\n            id\n            ...ProductListItem\n          }\n        }\n      }\n    }\n  }\n": types.SiteDetailsFragmentDoc,
    "\n  mutation AddOrder($input: AddOrderInput!) {\n    addOrderForMe(input: $input) {\n      order {\n        id\n        number\n        totalPrice {\n          amount\n          currency\n        }\n        orderDateTime\n        stateDescription {\n          orderState\n          stateChangeDescription\n        }\n        items {\n          nodes {\n            id\n            image {\n              url\n            }\n            extraOptions {\n              name\n              price {\n                amount\n                currency\n              }\n              extraOptionId\n            }\n            orderItemTotalPrice {\n              currency\n              amount\n            }\n            product {\n              id\n              name\n              image {\n                url\n              }\n              price {\n                currency\n                amount\n              }\n              slug\n              description\n              siteId\n              siteSummary {\n                name\n                slug\n              }\n              categories {\n                name\n                slug\n              }\n              extraOptions {\n                category{\n                  id\n                  name\n                }\n                extraOptionCategoryId\n                price {\n                  amount\n                  currency\n                }\n                id\n                name\n              }\n            }\n            productDescription\n            productName\n            productPrice {\n              amount\n              currency\n            }\n            quantity\n            productId\n          }\n        }\n      }\n    }\n  }\n": types.AddOrderDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductBySlugQuery($siteSlug: String!, $productSlug: String!) {\n    productBySlug(siteSlug: $siteSlug, productSlug: $productSlug) {\n       ...ProductFieldsFromProductSlug\n    }\n  }\n"): (typeof documents)["\n  query getProductBySlugQuery($siteSlug: String!, $productSlug: String!) {\n    productBySlug(siteSlug: $siteSlug, productSlug: $productSlug) {\n       ...ProductFieldsFromProductSlug\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getSiteBySlugForSitePageQuery($slug: String!) {\n    siteBySlug(slug: $slug) {\n      name\n      ...SiteDetails\n    }\n  }\n"): (typeof documents)["\n  query getSiteBySlugForSitePageQuery($slug: String!) {\n    siteBySlug(slug: $slug) {\n      name\n      ...SiteDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getSiteDeliveryInfoQuery($siteId: ID!) {\n    siteById(id: $siteId) {\n      ...SiteDeliveryInfo\n    }\n  }\n"): (typeof documents)["\n  query getSiteDeliveryInfoQuery($siteId: ID!) {\n    siteById(id: $siteId) {\n      ...SiteDeliveryInfo\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getOrderByIdQuery($orderId: ID!) {\n    orderById(id: $orderId) {\n      order {\n        orderDateTime\n        ...OrderByIdDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOrderByIdQuery($orderId: ID!) {\n    orderById(id: $orderId) {\n      order {\n        orderDateTime\n        ...OrderByIdDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAllOrdersForMeQuery($first: Int, $last: Int, $after: String, $before: String){\n    ordersForMe(first: $first, last: $last, after: $after, before: $before, order: [{orderDateTime: DESC}]){\n      edges {\n        node{\n          id\n          ...OrderCardFields\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getAllOrdersForMeQuery($first: Int, $last: Int, $after: String, $before: String){\n    ordersForMe(first: $first, last: $last, after: $after, before: $before, order: [{orderDateTime: DESC}]){\n      edges {\n        node{\n          id\n          ...OrderCardFields\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getSiteBySlugQuery($slug: String!) {\n    siteBySlug(slug: $slug) {\n      ...SiteDetails\n    }\n  }\n"): (typeof documents)["\n  query getSiteBySlugQuery($slug: String!) {\n    siteBySlug(slug: $slug) {\n      ...SiteDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePaymentDataMutation($input: CreatePaymentDataInput!) {\n    createPaymentData(input: $input) {\n      pymentData {\n        data\n        key\n        cipher\n        iv\n        paymentUri\n      }\n      errors {\n        message\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePaymentDataMutation($input: CreatePaymentDataInput!) {\n    createPaymentData(input: $input) {\n      pymentData {\n        data\n        key\n        cipher\n        iv\n        paymentUri\n      }\n      errors {\n        message\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductListItem on Product {\n    id\n    name\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    siteSummary {\n      name\n      slug\n    }\n    extraOptions {\n      category{\n        id\n        name\n      }\n      extraOptionCategoryId\n      price {\n        amount\n        currency\n      }\n      id\n      name\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment ProductListItem on Product {\n    id\n    name\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    siteSummary {\n      name\n      slug\n    }\n    extraOptions {\n      category{\n        id\n        name\n      }\n      extraOptionCategoryId\n      price {\n        amount\n        currency\n      }\n      id\n      name\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SiteDeliveryInfo on Site {\n    id\n    onlyPredeffinedDeliveryOptions\n    deliveryOptions {\n      country\n      region\n      city\n      line1\n      line2\n      displayName\n    }\n  }\n"): (typeof documents)["\n  fragment SiteDeliveryInfo on Site {\n    id\n    onlyPredeffinedDeliveryOptions\n    deliveryOptions {\n      country\n      region\n      city\n      line1\n      line2\n      displayName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductFieldsForOrder on Product {\n    id\n    name\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    siteSummary {\n      name\n      slug\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment ProductFieldsForOrder on Product {\n    id\n    name\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    siteSummary {\n      name\n      slug\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderCardFields on Order {\n    id\n    number\n    stateDescription {\n      orderState\n      stateChangeDescription\n    }\n    totalPrice {\n      amount\n      currency\n    }\n    orderDateTime\n    paymentState {\n      status\n      type\n    }\n    items {\n      nodes {\n        id\n        productId\n        productName\n        productPrice {\n          amount\n          currency\n        }\n        quantity\n        orderItemTotalPrice {\n          currency\n          amount\n        }\n        extraOptions {\n          extraOptionId\n          price {\n            amount\n            currency\n          }\n          name\n        }\n        product {\n          slug\n          siteSummary {\n            name\n            slug\n          }\n        }\n        productDescription\n        image {\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment OrderCardFields on Order {\n    id\n    number\n    stateDescription {\n      orderState\n      stateChangeDescription\n    }\n    totalPrice {\n      amount\n      currency\n    }\n    orderDateTime\n    paymentState {\n      status\n      type\n    }\n    items {\n      nodes {\n        id\n        productId\n        productName\n        productPrice {\n          amount\n          currency\n        }\n        quantity\n        orderItemTotalPrice {\n          currency\n          amount\n        }\n        extraOptions {\n          extraOptionId\n          price {\n            amount\n            currency\n          }\n          name\n        }\n        product {\n          slug\n          siteSummary {\n            name\n            slug\n          }\n        }\n        productDescription\n        image {\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OrderByIdDetails on Order {\n    id\n    number\n    totalPrice {\n      amount\n      currency\n    }\n    orderDateTime\n    stateDescription {\n      orderState\n      stateChangeDescription\n    }\n    items {\n      nodes {\n        id\n        image {\n          url\n        }\n        extraOptions {\n          extraOptionId\n          price {\n            amount\n            currency\n          }\n          name\n        }\n        orderItemTotalPrice {\n          currency\n          amount\n        }\n        product {\n          id\n          name\n          image {\n            url\n          }\n          price {\n            amount\n            currency\n          }\n          slug\n          description\n          siteId\n          siteSummary {\n            name\n            slug\n          }\n          extraOptions {\n            category{\n              id\n              name\n            }\n            extraOptionCategoryId\n            price {\n              amount\n              currency\n            }\n            id\n            name\n          }\n          categories {\n            name\n            slug\n          }\n        }\n        productDescription\n        productName\n        productPrice {\n          amount\n          currency\n        }\n        quantity\n        productId\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment OrderByIdDetails on Order {\n    id\n    number\n    totalPrice {\n      amount\n      currency\n    }\n    orderDateTime\n    stateDescription {\n      orderState\n      stateChangeDescription\n    }\n    items {\n      nodes {\n        id\n        image {\n          url\n        }\n        extraOptions {\n          extraOptionId\n          price {\n            amount\n            currency\n          }\n          name\n        }\n        orderItemTotalPrice {\n          currency\n          amount\n        }\n        product {\n          id\n          name\n          image {\n            url\n          }\n          price {\n            amount\n            currency\n          }\n          slug\n          description\n          siteId\n          siteSummary {\n            name\n            slug\n          }\n          extraOptions {\n            category{\n              id\n              name\n            }\n            extraOptionCategoryId\n            price {\n              amount\n              currency\n            }\n            id\n            name\n          }\n          categories {\n            name\n            slug\n          }\n        }\n        productDescription\n        productName\n        productPrice {\n          amount\n          currency\n        }\n        quantity\n        productId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductFieldsFromProductSlug on Product {\n    name\n    id\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    extraOptions {\n      category{\n        id\n        name\n      }\n      extraOptionCategoryId\n      price {\n        amount\n        currency\n      }\n      id\n      name\n    }\n    siteSummary {\n      name\n      slug\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment ProductFieldsFromProductSlug on Product {\n    name\n    id\n    price {\n      amount\n      currency\n    }\n    slug\n    description\n    siteId\n    extraOptions {\n      category{\n        id\n        name\n      }\n      extraOptionCategoryId\n      price {\n        amount\n        currency\n      }\n      id\n      name\n    }\n    siteSummary {\n      name\n      slug\n    }\n    categories {\n      name\n      slug\n    }\n    image {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SiteDetails on Site {\n    name\n    id\n    slug\n    categories(order: [{ displayNumber: ASC }]) {\n      nodes {\n        id\n        name\n        slug\n        products(order: [{ name: ASC }]) {\n          nodes {\n            id\n            ...ProductListItem\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment SiteDetails on Site {\n    name\n    id\n    slug\n    categories(order: [{ displayNumber: ASC }]) {\n      nodes {\n        id\n        name\n        slug\n        products(order: [{ name: ASC }]) {\n          nodes {\n            id\n            ...ProductListItem\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddOrder($input: AddOrderInput!) {\n    addOrderForMe(input: $input) {\n      order {\n        id\n        number\n        totalPrice {\n          amount\n          currency\n        }\n        orderDateTime\n        stateDescription {\n          orderState\n          stateChangeDescription\n        }\n        items {\n          nodes {\n            id\n            image {\n              url\n            }\n            extraOptions {\n              name\n              price {\n                amount\n                currency\n              }\n              extraOptionId\n            }\n            orderItemTotalPrice {\n              currency\n              amount\n            }\n            product {\n              id\n              name\n              image {\n                url\n              }\n              price {\n                currency\n                amount\n              }\n              slug\n              description\n              siteId\n              siteSummary {\n                name\n                slug\n              }\n              categories {\n                name\n                slug\n              }\n              extraOptions {\n                category{\n                  id\n                  name\n                }\n                extraOptionCategoryId\n                price {\n                  amount\n                  currency\n                }\n                id\n                name\n              }\n            }\n            productDescription\n            productName\n            productPrice {\n              amount\n              currency\n            }\n            quantity\n            productId\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddOrder($input: AddOrderInput!) {\n    addOrderForMe(input: $input) {\n      order {\n        id\n        number\n        totalPrice {\n          amount\n          currency\n        }\n        orderDateTime\n        stateDescription {\n          orderState\n          stateChangeDescription\n        }\n        items {\n          nodes {\n            id\n            image {\n              url\n            }\n            extraOptions {\n              name\n              price {\n                amount\n                currency\n              }\n              extraOptionId\n            }\n            orderItemTotalPrice {\n              currency\n              amount\n            }\n            product {\n              id\n              name\n              image {\n                url\n              }\n              price {\n                currency\n                amount\n              }\n              slug\n              description\n              siteId\n              siteSummary {\n                name\n                slug\n              }\n              categories {\n                name\n                slug\n              }\n              extraOptions {\n                category{\n                  id\n                  name\n                }\n                extraOptionCategoryId\n                price {\n                  amount\n                  currency\n                }\n                id\n                name\n              }\n            }\n            productDescription\n            productName\n            productPrice {\n              amount\n              currency\n            }\n            quantity\n            productId\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;