// <auto-generated />
using System;
using Crozy.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crozy.Infrastructure.Migrations
{
    [DbContext(typeof(CrozyDbContext))]
    [Migration("20240503090354_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrderNumbers");

            modelBuilder.Entity("Crozy.Domain.Buyers.Buyer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("Crozy.Domain.Categories.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Crozy.Domain.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OrderDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Crozy.Domain.Orders.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(14, 5)
                        .HasColumnType("numeric(14,5)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Crozy.Domain.Organisations.Organisation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Crozy.Domain.Payments.PaymentTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("XmlRequestMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("Crozy.Domain.Payments.PaymentTransactionResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("XmlResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PaymentTransactionId");

                    b.ToTable("PaymentTransactionResults");
                });

            modelBuilder.Entity("Crozy.Domain.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.Property<long>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("SiteId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Crozy.Domain.Products.ProductCategoryLink", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Crozy.Domain.Sellers.Seller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("SellerState")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId", "OrganisationId")
                        .IsUnique();

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Crozy.Domain.Sites.Site", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("OnlyPredeffinedDeliveryOptions")
                        .HasColumnType("boolean");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Crozy.Domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Crozy.Domain.Buyers.Buyer", b =>
                {
                    b.HasOne("Crozy.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("Crozy.Domain.Buyers.Buyer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crozy.Domain.Categories.Category", b =>
                {
                    b.HasOne("Crozy.Domain.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Crozy.Domain.Orders.Order", b =>
                {
                    b.HasOne("Crozy.Domain.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Crozy.Domain.Orders.CustomerDetails", "CustomerDetails", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint");

                            b1.Property<long?>("BuyerId")
                                .HasColumnType("bigint");

                            b1.HasKey("OrderId");

                            b1.HasIndex("BuyerId");

                            b1.ToTable("Orders");

                            b1.HasOne("Crozy.Domain.Buyers.Buyer", null)
                                .WithMany()
                                .HasForeignKey("BuyerId");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsOne("Crozy.Domain.EmailAddress", "Email", b2 =>
                                {
                                    b2.Property<long>("CustomerDetailsOrderId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("CustomerDetailsOrderId");

                                    b2.ToTable("Orders");

                                    b2.WithOwner()
                                        .HasForeignKey("CustomerDetailsOrderId");
                                });

                            b1.OwnsOne("Crozy.Domain.PhoneNumber", "PhoneNumber", b2 =>
                                {
                                    b2.Property<long>("CustomerDetailsOrderId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("Phone")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("CustomerDetailsOrderId");

                                    b2.ToTable("Orders");

                                    b2.WithOwner()
                                        .HasForeignKey("CustomerDetailsOrderId");
                                });

                            b1.Navigation("Email");

                            b1.Navigation("PhoneNumber");
                        });

                    b.OwnsOne("Crozy.Domain.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Crozy.Domain.Orders.OrderStateDescription", "StateDescription", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint");

                            b1.Property<int>("OrderState")
                                .HasColumnType("integer");

                            b1.Property<string>("StateChangeDescription")
                                .HasColumnType("text");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Crozy.Domain.Orders.PaymentState", "PaymentState", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint");

                            b1.Property<long?>("PaymentMessageId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("CustomerDetails")
                        .IsRequired();

                    b.Navigation("PaymentState")
                        .IsRequired();

                    b.Navigation("ShippingAddress")
                        .IsRequired();

                    b.Navigation("StateDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("Crozy.Domain.Orders.OrderItem", b =>
                {
                    b.HasOne("Crozy.Domain.Orders.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crozy.Domain.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Crozy.Domain.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Crozy.Domain.Payments.PaymentTransaction", b =>
                {
                    b.HasOne("Crozy.Domain.Orders.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Crozy.Domain.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Crozy.Domain.Payments.PaymentTransactionResult", b =>
                {
                    b.HasOne("Crozy.Domain.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Crozy.Domain.Payments.PaymentTransaction", null)
                        .WithMany("Results")
                        .HasForeignKey("PaymentTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Crozy.Domain.Products.Product", b =>
                {
                    b.HasOne("Crozy.Domain.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Crozy.Domain.Sites.Site", null)
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crozy.Domain.Products.ProductCategoryLink", b =>
                {
                    b.HasOne("Crozy.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crozy.Domain.Products.Product", null)
                        .WithMany("CategoryLinks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crozy.Domain.Sellers.Seller", b =>
                {
                    b.HasOne("Crozy.Domain.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Crozy.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Crozy.Domain.Sellers.Invitation", "Invitation", b1 =>
                        {
                            b1.Property<long>("SellerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("InvitationCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("InvitationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("InvitationState")
                                .HasColumnType("integer");

                            b1.Property<int>("Role")
                                .HasColumnType("integer");

                            b1.HasKey("SellerId");

                            b1.HasIndex("InvitationCode")
                                .IsUnique();

                            b1.ToTable("Sellers");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");

                            b1.OwnsOne("Crozy.Domain.EmailAddress", "EmailAddress", b2 =>
                                {
                                    b2.Property<long>("InvitationSellerId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("InvitationSellerId");

                                    b2.ToTable("Sellers");

                                    b2.WithOwner()
                                        .HasForeignKey("InvitationSellerId");
                                });

                            b1.Navigation("EmailAddress")
                                .IsRequired();
                        });

                    b.Navigation("Invitation");
                });

            modelBuilder.Entity("Crozy.Domain.Sites.Site", b =>
                {
                    b.HasOne("Crozy.Domain.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("Crozy.Domain.Address", "DeliveryOptions", b1 =>
                        {
                            b1.Property<long>("SiteId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SiteId", "Id");

                            b1.ToTable("Sites_DeliveryOptions");

                            b1.WithOwner()
                                .HasForeignKey("SiteId");
                        });

                    b.Navigation("DeliveryOptions");
                });

            modelBuilder.Entity("Crozy.Domain.Users.User", b =>
                {
                    b.OwnsOne("Crozy.Domain.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Crozy.Domain.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("EmailAddress")
                        .IsRequired();

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("Crozy.Domain.Orders.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Crozy.Domain.Payments.PaymentTransaction", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Crozy.Domain.Products.Product", b =>
                {
                    b.Navigation("CategoryLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
